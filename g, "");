      }

      // Clean the response to ensure it's a valid JSON string
      text = text.replace(/[\u0000-\u001F]+/g, "").trim();

      const jsonString = text.includes("{") ? text.substring(text.indexOf("{")) : text;
      const data = JSON.parse(jsonString);

      // For MCQ, ensure choices and correctChoice are aligned
      if (questionType === "MCQ") {
        // Verify choices array length
        if (!Array.isArray(data.choices) || data.choices.length !== 4) {
          throw new Error("Invalid choices format");
        }
        if (!["A", "B", "C", "D"].includes(data.correctChoice)) {
          throw new Error("Invalid correctChoice value");
        }
        // Map choices labels if necessary
        // assuming choices come with options labeled A-D
      }

      return {
        questionText: data.questionText,
        answer: data.answer,
        explanation: data.explanation,
        choices: data.choices,
        correctChoice: data.correctChoice,
      };
    } catch (error) {
      console.error("Error generating content with Gemini:", error);
      if (error instanceof Error) {
        throw new Error(`AI Content Generation Failed: ${error.message}`);
      }
      throw new Error("Failed to generate question using AI due to an unknown error.");
    }
  },
});
=======
export const generateQuestion = action({
  args: {
    topic: v.string(),
    questionType: v.string(),
    difficulty: v.string(),
  },
  returns: v.object({
    questionText: v.string(),
    answer: v.string(),
    explanation: v.string(),
    choices: v.optional(v.array(v.string())),
    correctChoice: v.optional(v.string()),
  }),
  handler: async (ctx, args) => {
    const { topic, questionType, difficulty } = args;
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

    let prompt = "";
    if (questionType === "MCQ") {
      prompt = `Generate a ${difficulty} multiple-choice question for AP Physics C about ${topic}. 
      
      IMPORTANT: Return ONLY a valid JSON object with exactly these keys:
      - "questionText": the question as a string
      - "choices": an array of exactly 4 strings (A, B, C, D options)
      - "correctChoice": a single letter string ("A", "B", "C", or "D")
      - "explanation": detailed explanation as a string
      
      Example format:
      {"questionText":"What is the acceleration due to gravity?","choices":["9.8 m/s²","10 m/s²","8.9 m/s²","11 m/s²"],"correctChoice":"A","explanation":"The standard acceleration due to gravity on Earth is 9.8 m/s²."}
      
      Return ONLY the JSON object, no other text.`;
    } else {
      prompt = `Generate a ${difficulty} free-response question for AP Physics C about ${topic}. 
      
      IMPORTANT: Return ONLY a valid JSON object with exactly these keys:
      - "questionText": the question as a string
      - "answer": the final numerical/text answer as a string
      - "explanation": detailed step-by-step solution as a string
      
      Example format:
      {"questionText":"Calculate the force needed to accelerate a 5kg object at 2 m/s².","answer":"10 N","explanation":"Using F = ma, F = 5 kg × 2 m/s² = 10 N"}
      
      Return ONLY the JSON object, no other text.`;
    }

    try {
      const result = await model.generateContent(prompt);
      const response = await result.response;
      let text = response.text().trim();

      // Log the raw response for debugging
      console.log("Raw Gemini response:", text);

      // Try to extract JSON more carefully
      let jsonText = text;
      
      // Remove markdown code blocks if present
      if (text.includes('